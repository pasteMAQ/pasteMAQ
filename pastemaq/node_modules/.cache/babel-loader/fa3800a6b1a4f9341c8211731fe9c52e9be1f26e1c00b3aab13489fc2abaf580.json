{"ast":null,"code":"var _jsxFileName = \"/Users/kaashish/pastemaq/pastemaq/src/components/ViewPaste.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewPaste = () => {\n  _s();\n  var _date, _date2, _date3;\n  const [text, setText] = React.useState('');\n  const [expiryDate, setExpiryDate] = React.useState();\n  useEffect(() => {\n    fetch('http://localhost:5005/paste/' + pasteId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      mode: 'cors'\n    }).then(response => response.json()).then(data => {\n      setText(data.content);\n      setExpiryDate(data.expiryDate);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, []);\n  var datemap = {\n    1: \"January\",\n    2: \"February\",\n    3: \"March\",\n    4: \"April\",\n    5: \"May\",\n    6: \"June\",\n    7: \"July\",\n    8: \"August\",\n    9: \"September\",\n    10: \"October\",\n    11: \"November\",\n    12: \"December\"\n  };\n  const copyToClipboard = e => {\n    navigator.clipboard.writeText(window.location.toString());\n  };\n  const {\n    pasteId\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paste-id\",\n      children: [\"Paste # \", pasteId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      disabled: true,\n      rows: \"10\",\n      cols: \"80\",\n      style: {\n        height: '170px'\n      },\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"note\",\n        children: [\"This paste will expire on \", datemap[((_date = date) === null || _date === void 0 ? void 0 : _date.getMonth()) + 1] + \" \" + ((_date2 = date) === null || _date2 === void 0 ? void 0 : _date2.getDate()) + \", \" + ((_date3 = date) === null || _date3 === void 0 ? void 0 : _date3.getFullYear())]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"copy-button\",\n        type: \"button\",\n        value: \"Copy Url\",\n        onClick: () => copyToClipboard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(ViewPaste, \"d//DZinIXPXrBYhwlrjo8n6xkOM=\", false, function () {\n  return [useParams];\n});\n_c = ViewPaste;\nexport default ViewPaste;\nvar _c;\n$RefreshReg$(_c, \"ViewPaste\");","map":{"version":3,"names":["React","useEffect","useParams","jsxDEV","_jsxDEV","ViewPaste","_s","_date","_date2","_date3","text","setText","useState","expiryDate","setExpiryDate","fetch","pasteId","method","headers","mode","then","response","json","data","content","catch","error","console","datemap","copyToClipboard","e","navigator","clipboard","writeText","window","location","toString","children","className","fileName","_jsxFileName","lineNumber","columnNumber","disabled","rows","cols","style","height","value","date","getMonth","getDate","getFullYear","type","onClick","_c","$RefreshReg$"],"sources":["/Users/kaashish/pastemaq/pastemaq/src/components/ViewPaste.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nconst ViewPaste = () => {\n    const [text, setText] = React.useState('');\n    const [expiryDate, setExpiryDate] = React.useState();\n\n    useEffect(() => {\n        fetch('http://localhost:5005/paste/' + pasteId, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors'\n        })\n            .then(response => response.json())\n            .then(data => {\n                setText(data.content);\n                setExpiryDate(data.expiryDate);\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            }\n            );\n    }, []);\n\n    var datemap = { 1: \"January\", 2: \"February\", 3: \"March\", 4: \"April\", 5: \"May\", 6: \"June\", 7: \"July\", 8: \"August\", 9: \"September\", 10: \"October\", 11: \"November\", 12: \"December\" };\n\n    const copyToClipboard = e => {\n        navigator.clipboard.writeText(window.location.toString())\n    }\n\n    const { pasteId } = useParams();\n    return (\n        <div>\n            <div className='paste-id'>Paste # {pasteId}</div>\n            <textarea disabled rows=\"10\" cols=\"80\" style={{ height: '170px' }} value={text}></textarea>\n            <div className=\"details\">\n                <h6 className=\"note\">This paste will expire on {datemap[date?.getMonth() + 1] + \" \" + date?.getDate() + \", \" + date?.getFullYear()}</h6>\n                <input className=\"copy-button\" type=\"button\" value=\"Copy Url\" onClick={() => copyToClipboard()} />\n            </div>\n        </div>\n    );\n};\n\nexport default ViewPaste;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}